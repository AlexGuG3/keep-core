package chain

import (
	"bytes"
	"fmt"
)

// DKGResult is a result of distributed key generation protocol.
//
// If protocol execution finishes with an acceptable number of disqualified
// or inactive members, the group of remaining members will be added to the
// signing groups for the threshold relay.
//
// Otherwise, group creation will not finish, which will be due to either the
// number of inactive or disqualified participants, or the results (signatures )
// being disputed in a way where the correct outcome cannot be ascertained.
type DKGResult struct {
	// Group public key generated by protocol execution, empty if the protocol failed.
	GroupPublicKey []byte
	// Disqualified members are represented as a slice of bytes for optimizing
	// on-chain storage. The length of the slice, and ordering of the members is
	// the same as the members group. Disqualified members are marked as 0x01,
	// non-disqualified members as 0x00.
	Disqualified []byte
	// Inactive members are represented as a slice of bytes for optimizing
	// on-chain storage. The length of the slice, and ordering of the members is
	// the same as the members group. Inactive members are marked as 0x01,
	// active members as 0x00.
	Inactive []byte
	// Signatures are the ordered, collected, and concatenated (65 bytes each)
	// signer hashes that are submitted to the chain.
	Signatures []byte
}

// DKGResultHash is a 256-bit hash of DKG Result. The hashing algorithm should
// be the same as the one used on-chain.
type DKGResultHash [hashByteSize]byte

const hashByteSize = 32

// DKGResultsVotes is a map of votes for each DKG Result.
type DKGResultsVotes map[DKGResultHash]int

// Equals checks if two DKG results are equal.
func (r *DKGResult) Equals(r2 *DKGResult) bool {
	if r == nil || r2 == nil {
		return r == r2
	}
	if !bytes.Equal(r.GroupPublicKey, r2.GroupPublicKey) {
		return false
	}
	if !bytes.Equal(r.Disqualified, r2.Disqualified) {
		return false
	}
	if !bytes.Equal(r.Inactive, r2.Inactive) {
		return false
	}
	if !bytes.Equal(r.Signatures, r2.Signatures) {
		return false
	}

	return true
}

// DKGResultHashFromBytes converts bytes slice to DKG Result Hash. It requires
// provided bytes slice size to be exactly 32 bytes.
func DKGResultHashFromBytes(bytes []byte) (DKGResultHash, error) {
	var hash DKGResultHash

	if len(bytes) != hashByteSize {
		return hash, fmt.Errorf("bytes length is not equal %v", hashByteSize)
	}
	copy(hash[:], bytes[:])

	return hash, nil
}
