package gjkr

import (
	"fmt"
	"math/big"

	bn256 "github.com/ethereum/go-ethereum/crypto/bn256/cloudflare"
	"github.com/keep-network/keep-core/pkg/beacon/relay/group"
)

// Result of distributed key generation protocol.
type Result struct {
	// Group represents the group state, including members, disqualified,
	// and inactive members.
	Group *group.Group
	// Group public key generated by protocol execution.
	GroupPublicKey *bn256.G2
	// Share of the group private key. It is used for signing and should never
	// be revealed publicly.
	GroupPrivateKeyShare *big.Int
}

// GroupPublicKeyBytes returns marshalled group public key.
func (r *Result) GroupPublicKeyBytes() ([]byte, error) {
	if r.GroupPublicKey == nil {
		return nil, fmt.Errorf("group public key is nil")
	}

	return r.GroupPublicKey.Marshal(), nil
}
