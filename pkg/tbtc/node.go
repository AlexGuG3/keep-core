package tbtc

import (
	"github.com/keep-network/keep-common/pkg/persistence"
	"github.com/keep-network/keep-core/pkg/ecdsa"
	"github.com/keep-network/keep-core/pkg/net"
	"math/big"
)

// node represents the current state of an ECDSA node.
type node struct {
	chain       Chain
	netProvider net.Provider
}

func newNode(
	chain Chain,
	netProvider net.Provider,
	persistence persistence.Handle,
) *node {
	return &node{
		chain:       chain,
		netProvider: netProvider,
	}
}

// joinDKGIfEligible takes a seed value and undergoes the process of the
// distributed key generation if this node's operator proves to be eligible for
// the group generated by that seed. This is an interactive on-chain process,
// and joinDKGIfEligible can block for an extended period of time while it
// completes the on-chain operation.
func (n *node) joinDKGIfEligible(seed *big.Int, startBlockNumber uint64) {
	// TODO: Implementation.
	ecdsa.StartDKG()
}
