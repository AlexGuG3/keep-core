// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/message.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EphemeralPublicKeyMessage struct {
	SenderID            uint32            `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	EphemeralPublicKeys map[uint32][]byte `protobuf:"bytes,2,rep,name=ephemeralPublicKeys,proto3" json:"ephemeralPublicKeys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SessionID           string            `protobuf:"bytes,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *EphemeralPublicKeyMessage) Reset()      { *m = EphemeralPublicKeyMessage{} }
func (*EphemeralPublicKeyMessage) ProtoMessage() {}
func (*EphemeralPublicKeyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{0}
}
func (m *EphemeralPublicKeyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralPublicKeyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EphemeralPublicKeyMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EphemeralPublicKeyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralPublicKeyMessage.Merge(m, src)
}
func (m *EphemeralPublicKeyMessage) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralPublicKeyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralPublicKeyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralPublicKeyMessage proto.InternalMessageInfo

func (m *EphemeralPublicKeyMessage) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *EphemeralPublicKeyMessage) GetEphemeralPublicKeys() map[uint32][]byte {
	if m != nil {
		return m.EphemeralPublicKeys
	}
	return nil
}

func (m *EphemeralPublicKeyMessage) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type TSSRoundOneMessage struct {
	SenderID  uint32 `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	Payload   []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	SessionID string `protobuf:"bytes,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *TSSRoundOneMessage) Reset()      { *m = TSSRoundOneMessage{} }
func (*TSSRoundOneMessage) ProtoMessage() {}
func (*TSSRoundOneMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{1}
}
func (m *TSSRoundOneMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSSRoundOneMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSSRoundOneMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSSRoundOneMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSSRoundOneMessage.Merge(m, src)
}
func (m *TSSRoundOneMessage) XXX_Size() int {
	return m.Size()
}
func (m *TSSRoundOneMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TSSRoundOneMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TSSRoundOneMessage proto.InternalMessageInfo

func (m *TSSRoundOneMessage) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *TSSRoundOneMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TSSRoundOneMessage) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type TSSRoundTwoMessage struct {
	SenderID         uint32            `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	BroadcastPayload []byte            `protobuf:"bytes,2,opt,name=broadcastPayload,proto3" json:"broadcastPayload,omitempty"`
	PeersPayload     map[uint32][]byte `protobuf:"bytes,3,rep,name=peersPayload,proto3" json:"peersPayload,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SessionID        string            `protobuf:"bytes,4,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *TSSRoundTwoMessage) Reset()      { *m = TSSRoundTwoMessage{} }
func (*TSSRoundTwoMessage) ProtoMessage() {}
func (*TSSRoundTwoMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{2}
}
func (m *TSSRoundTwoMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSSRoundTwoMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSSRoundTwoMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSSRoundTwoMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSSRoundTwoMessage.Merge(m, src)
}
func (m *TSSRoundTwoMessage) XXX_Size() int {
	return m.Size()
}
func (m *TSSRoundTwoMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TSSRoundTwoMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TSSRoundTwoMessage proto.InternalMessageInfo

func (m *TSSRoundTwoMessage) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *TSSRoundTwoMessage) GetBroadcastPayload() []byte {
	if m != nil {
		return m.BroadcastPayload
	}
	return nil
}

func (m *TSSRoundTwoMessage) GetPeersPayload() map[uint32][]byte {
	if m != nil {
		return m.PeersPayload
	}
	return nil
}

func (m *TSSRoundTwoMessage) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type TSSRoundThreeMessage struct {
	SenderID  uint32 `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	Payload   []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	SessionID string `protobuf:"bytes,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *TSSRoundThreeMessage) Reset()      { *m = TSSRoundThreeMessage{} }
func (*TSSRoundThreeMessage) ProtoMessage() {}
func (*TSSRoundThreeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8447775385e7eb85, []int{3}
}
func (m *TSSRoundThreeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSSRoundThreeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSSRoundThreeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSSRoundThreeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSSRoundThreeMessage.Merge(m, src)
}
func (m *TSSRoundThreeMessage) XXX_Size() int {
	return m.Size()
}
func (m *TSSRoundThreeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TSSRoundThreeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TSSRoundThreeMessage proto.InternalMessageInfo

func (m *TSSRoundThreeMessage) GetSenderID() uint32 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *TSSRoundThreeMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TSSRoundThreeMessage) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func init() {
	proto.RegisterType((*EphemeralPublicKeyMessage)(nil), "dkg.EphemeralPublicKeyMessage")
	proto.RegisterMapType((map[uint32][]byte)(nil), "dkg.EphemeralPublicKeyMessage.EphemeralPublicKeysEntry")
	proto.RegisterType((*TSSRoundOneMessage)(nil), "dkg.TSSRoundOneMessage")
	proto.RegisterType((*TSSRoundTwoMessage)(nil), "dkg.TSSRoundTwoMessage")
	proto.RegisterMapType((map[uint32][]byte)(nil), "dkg.TSSRoundTwoMessage.PeersPayloadEntry")
	proto.RegisterType((*TSSRoundThreeMessage)(nil), "dkg.TSSRoundThreeMessage")
}

func init() { proto.RegisterFile("pb/message.proto", fileDescriptor_8447775385e7eb85) }

var fileDescriptor_8447775385e7eb85 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x48, 0xd2, 0xcf,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0xc9,
	0x4e, 0x57, 0xea, 0x60, 0xe2, 0x92, 0x74, 0x2d, 0xc8, 0x48, 0xcd, 0x4d, 0x2d, 0x4a, 0xcc, 0x09,
	0x28, 0x4d, 0xca, 0xc9, 0x4c, 0xf6, 0x4e, 0xad, 0xf4, 0x85, 0x28, 0x14, 0x92, 0xe2, 0xe2, 0x28,
	0x4e, 0xcd, 0x4b, 0x49, 0x2d, 0xf2, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x82, 0xf3,
	0x85, 0x32, 0xb9, 0x84, 0x53, 0x31, 0x34, 0x16, 0x4b, 0x30, 0x29, 0x30, 0x6b, 0x70, 0x1b, 0x99,
	0xeb, 0xa5, 0x64, 0xa7, 0xeb, 0xe1, 0x34, 0x18, 0x8b, 0x4c, 0xb1, 0x6b, 0x5e, 0x49, 0x51, 0x65,
	0x10, 0x36, 0x33, 0x85, 0x64, 0xb8, 0x38, 0x8b, 0x53, 0x8b, 0x8b, 0x33, 0xf3, 0xf3, 0x3c, 0x5d,
	0x24, 0x98, 0x15, 0x18, 0x35, 0x38, 0x83, 0x10, 0x02, 0x52, 0x6e, 0x5c, 0x12, 0xb8, 0x8c, 0x13,
	0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad, 0x84, 0xba, 0x1d, 0xc4, 0x14, 0x12, 0xe1, 0x62, 0x2d, 0x4b,
	0xcc, 0x29, 0x4d, 0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0x70, 0xac, 0x98, 0x2c, 0x18,
	0x95, 0x32, 0xb8, 0x84, 0x42, 0x82, 0x83, 0x83, 0xf2, 0x4b, 0xf3, 0x52, 0xfc, 0xf3, 0x52, 0x89,
	0x09, 0x02, 0x09, 0x2e, 0xf6, 0x82, 0xc4, 0xca, 0x9c, 0xfc, 0xc4, 0x14, 0xa8, 0x69, 0x30, 0x2e,
	0x7e, 0x17, 0x2b, 0x75, 0x31, 0x21, 0xac, 0x0a, 0x29, 0xcf, 0x27, 0xc6, 0x2a, 0x2d, 0x2e, 0x81,
	0xa4, 0xa2, 0xfc, 0xc4, 0x94, 0xe4, 0xc4, 0xe2, 0x92, 0x00, 0x14, 0x3b, 0x31, 0xc4, 0x85, 0x7c,
	0xb9, 0x78, 0x0a, 0x52, 0x53, 0x8b, 0x8a, 0x61, 0xea, 0x98, 0xc1, 0x51, 0xa2, 0x09, 0x8e, 0x12,
	0x4c, 0x6b, 0xf5, 0x02, 0x90, 0xd4, 0x42, 0x22, 0x01, 0x45, 0x3b, 0xaa, 0x5f, 0x58, 0xd0, 0x43,
	0xdf, 0x9e, 0x4b, 0x10, 0xc3, 0x00, 0x92, 0x82, 0x3d, 0x8b, 0x4b, 0x04, 0xee, 0xa8, 0x8c, 0xa2,
	0x54, 0x5a, 0x06, 0xbc, 0x93, 0xc5, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78,
	0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f,
	0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18,
	0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xa6, 0x82,
	0xa4, 0x24, 0x36, 0x70, 0x9e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xb4, 0x78, 0x3c,
	0x47, 0x03, 0x00, 0x00,
}

func (this *EphemeralPublicKeyMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EphemeralPublicKeyMessage)
	if !ok {
		that2, ok := that.(EphemeralPublicKeyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if len(this.EphemeralPublicKeys) != len(that1.EphemeralPublicKeys) {
		return false
	}
	for i := range this.EphemeralPublicKeys {
		if !bytes.Equal(this.EphemeralPublicKeys[i], that1.EphemeralPublicKeys[i]) {
			return false
		}
	}
	if this.SessionID != that1.SessionID {
		return false
	}
	return true
}
func (this *TSSRoundOneMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TSSRoundOneMessage)
	if !ok {
		that2, ok := that.(TSSRoundOneMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if this.SessionID != that1.SessionID {
		return false
	}
	return true
}
func (this *TSSRoundTwoMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TSSRoundTwoMessage)
	if !ok {
		that2, ok := that.(TSSRoundTwoMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if !bytes.Equal(this.BroadcastPayload, that1.BroadcastPayload) {
		return false
	}
	if len(this.PeersPayload) != len(that1.PeersPayload) {
		return false
	}
	for i := range this.PeersPayload {
		if !bytes.Equal(this.PeersPayload[i], that1.PeersPayload[i]) {
			return false
		}
	}
	if this.SessionID != that1.SessionID {
		return false
	}
	return true
}
func (this *TSSRoundThreeMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TSSRoundThreeMessage)
	if !ok {
		that2, ok := that.(TSSRoundThreeMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderID != that1.SenderID {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if this.SessionID != that1.SessionID {
		return false
	}
	return true
}
func (this *EphemeralPublicKeyMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.EphemeralPublicKeyMessage{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	keysForEphemeralPublicKeys := make([]uint32, 0, len(this.EphemeralPublicKeys))
	for k, _ := range this.EphemeralPublicKeys {
		keysForEphemeralPublicKeys = append(keysForEphemeralPublicKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForEphemeralPublicKeys)
	mapStringForEphemeralPublicKeys := "map[uint32][]byte{"
	for _, k := range keysForEphemeralPublicKeys {
		mapStringForEphemeralPublicKeys += fmt.Sprintf("%#v: %#v,", k, this.EphemeralPublicKeys[k])
	}
	mapStringForEphemeralPublicKeys += "}"
	if this.EphemeralPublicKeys != nil {
		s = append(s, "EphemeralPublicKeys: "+mapStringForEphemeralPublicKeys+",\n")
	}
	s = append(s, "SessionID: "+fmt.Sprintf("%#v", this.SessionID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TSSRoundOneMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.TSSRoundOneMessage{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "SessionID: "+fmt.Sprintf("%#v", this.SessionID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TSSRoundTwoMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.TSSRoundTwoMessage{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	s = append(s, "BroadcastPayload: "+fmt.Sprintf("%#v", this.BroadcastPayload)+",\n")
	keysForPeersPayload := make([]uint32, 0, len(this.PeersPayload))
	for k, _ := range this.PeersPayload {
		keysForPeersPayload = append(keysForPeersPayload, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForPeersPayload)
	mapStringForPeersPayload := "map[uint32][]byte{"
	for _, k := range keysForPeersPayload {
		mapStringForPeersPayload += fmt.Sprintf("%#v: %#v,", k, this.PeersPayload[k])
	}
	mapStringForPeersPayload += "}"
	if this.PeersPayload != nil {
		s = append(s, "PeersPayload: "+mapStringForPeersPayload+",\n")
	}
	s = append(s, "SessionID: "+fmt.Sprintf("%#v", this.SessionID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TSSRoundThreeMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.TSSRoundThreeMessage{")
	s = append(s, "SenderID: "+fmt.Sprintf("%#v", this.SenderID)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "SessionID: "+fmt.Sprintf("%#v", this.SessionID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EphemeralPublicKeyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralPublicKeyMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralPublicKeyMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EphemeralPublicKeys) > 0 {
		for k := range m.EphemeralPublicKeys {
			v := m.EphemeralPublicKeys[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TSSRoundOneMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSSRoundOneMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSSRoundOneMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TSSRoundTwoMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSSRoundTwoMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSSRoundTwoMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PeersPayload) > 0 {
		for k := range m.PeersPayload {
			v := m.PeersPayload[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BroadcastPayload) > 0 {
		i -= len(m.BroadcastPayload)
		copy(dAtA[i:], m.BroadcastPayload)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BroadcastPayload)))
		i--
		dAtA[i] = 0x12
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TSSRoundThreeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSSRoundThreeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSSRoundThreeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.SenderID != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EphemeralPublicKeyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	if len(m.EphemeralPublicKeys) > 0 {
		for k, v := range m.EphemeralPublicKeys {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + sovMessage(uint64(k)) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TSSRoundOneMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TSSRoundTwoMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	l = len(m.BroadcastPayload)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.PeersPayload) > 0 {
		for k, v := range m.PeersPayload {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + sovMessage(uint64(k)) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TSSRoundThreeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderID != 0 {
		n += 1 + sovMessage(uint64(m.SenderID))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EphemeralPublicKeyMessage) String() string {
	if this == nil {
		return "nil"
	}
	keysForEphemeralPublicKeys := make([]uint32, 0, len(this.EphemeralPublicKeys))
	for k, _ := range this.EphemeralPublicKeys {
		keysForEphemeralPublicKeys = append(keysForEphemeralPublicKeys, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForEphemeralPublicKeys)
	mapStringForEphemeralPublicKeys := "map[uint32][]byte{"
	for _, k := range keysForEphemeralPublicKeys {
		mapStringForEphemeralPublicKeys += fmt.Sprintf("%v: %v,", k, this.EphemeralPublicKeys[k])
	}
	mapStringForEphemeralPublicKeys += "}"
	s := strings.Join([]string{`&EphemeralPublicKeyMessage{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`EphemeralPublicKeys:` + mapStringForEphemeralPublicKeys + `,`,
		`SessionID:` + fmt.Sprintf("%v", this.SessionID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TSSRoundOneMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TSSRoundOneMessage{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`SessionID:` + fmt.Sprintf("%v", this.SessionID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TSSRoundTwoMessage) String() string {
	if this == nil {
		return "nil"
	}
	keysForPeersPayload := make([]uint32, 0, len(this.PeersPayload))
	for k, _ := range this.PeersPayload {
		keysForPeersPayload = append(keysForPeersPayload, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForPeersPayload)
	mapStringForPeersPayload := "map[uint32][]byte{"
	for _, k := range keysForPeersPayload {
		mapStringForPeersPayload += fmt.Sprintf("%v: %v,", k, this.PeersPayload[k])
	}
	mapStringForPeersPayload += "}"
	s := strings.Join([]string{`&TSSRoundTwoMessage{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`BroadcastPayload:` + fmt.Sprintf("%v", this.BroadcastPayload) + `,`,
		`PeersPayload:` + mapStringForPeersPayload + `,`,
		`SessionID:` + fmt.Sprintf("%v", this.SessionID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TSSRoundThreeMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TSSRoundThreeMessage{`,
		`SenderID:` + fmt.Sprintf("%v", this.SenderID) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`SessionID:` + fmt.Sprintf("%v", this.SessionID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EphemeralPublicKeyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralPublicKeyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralPublicKeyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EphemeralPublicKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EphemeralPublicKeys == nil {
				m.EphemeralPublicKeys = make(map[uint32][]byte)
			}
			var mapkey uint32
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EphemeralPublicKeys[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSSRoundOneMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSSRoundOneMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSSRoundOneMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSSRoundTwoMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSSRoundTwoMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSSRoundTwoMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BroadcastPayload = append(m.BroadcastPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.BroadcastPayload == nil {
				m.BroadcastPayload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeersPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeersPayload == nil {
				m.PeersPayload = make(map[uint32][]byte)
			}
			var mapkey uint32
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PeersPayload[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSSRoundThreeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSSRoundThreeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSSRoundThreeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
