syntax = "proto3";

option go_package = "pb";
package net;

// Envelope contains a marshalled message, as well as a signature over the
// the contents of the message (to ensure an adversary hasn't tampered
// with the contents).
message Envelope {
  // The marshalled message
  bytes message = 1;

  // Signature of the message
  bytes signature = 2;
}

// Message contains a marshalled payload. It also contains the Identities of
// the sender and receiver. Optionally, a Message may contain an encrypted
// Message field for messages which need to be secret (in which case the
// payload will be empty).
message Message {
  // The PublicKey of the sender
  bytes sender = 1;

  // The PublicKey of the recipient
  bytes recipient = 2;

  // A marshaled Protocol Message
  bytes payload = 3;

  // Type of the message as registered by the protocol
  bytes type = 4;

  // A marshalled, encrypted message; if this exists, payload is empty
  EncryptedMessage encrypted_message = 5;

  // Channel is the group name as well as the pubsub channel
  // Channel names are Keccak(StakingPubKey1 || ... || StakingPubKeyN) of
  // all valid group members.
  bytes channel = 6;

  // Proof that the peer that sent this message knows the channel's name.
  bytes channel_MAC = 7;
}

// EncryptedMessage is a marshalled, encrypted message.
message EncryptedMessage {
  bytes payload = 1;
  bytes signature = 4;
}

message Identity {
  bytes pub_key = 1;
}
